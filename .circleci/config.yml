version: 2

defaults: &defaults
  docker:
    - image: circleci/golang:1.12
  working_directory: /go/src/github.com/snowman-mh/go-sample

restore_docker_cache: &restore_docker_cache
  restore_cache:
    name: Restore Docker Image cache
    key: docker-{{ checksum "docker/development/Dockerfile" }}-{{ checksum "docker/mysql/Dockerfile" }}-{{ checksum "docker/docker-compose.test.yml" }}-{{ checksum "go.sum" }}

build_docker_cache: &build_docker_cache
  run:
    name: Pull and build images if no cache exists
    command: |
      if [ ! -f ~/caches/images.tar ]; then
        cp .env.default .env
        docker-compose -f docker-compose.test.yml build
        mkdir -p ~/caches
        docker save $(docker image ls | awk 'NR>=2 && ! /^<none>/{print $1}') -o ~/caches/images.tar
      fi
    working_directory: ./docker

save_docker_cache: &save_docker_cache
  save_cache:
    name: Save Docker Image cache
    key: docker-{{ checksum "docker/development/Dockerfile" }}-{{ checksum "docker/mysql/Dockerfile" }}-{{ checksum "docker/docker-compose.test.yml" }}-{{ checksum "go.sum" }}
    paths: ~/caches/images.tar

jobs:
  precheck:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Check Go format
          command: test -z $(gofmt -s -l src main.go | tee /dev/stderr)
      - restore_cache:
          name: Restore goimports cache
          key: goimports
      - run:
          name: Check Go imports
          command: |
            if ! type goimports >/dev/null 2>&1; then
              go get golang.org/x/tools/cmd/goimports
            fi
            test -z $(goimports -l -e src main.go | tee /dev/stderr)
      - save_cache:
          name: Save goimports cache
          key: goimports
          paths: /go/bin/goimports
  docker_cache:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *restore_docker_cache
      - *build_docker_cache
      - *save_docker_cache
  test:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *restore_docker_cache
      - *build_docker_cache
      - *save_docker_cache
      - run:
          name: Run test
          command: |
            docker load -i ~/caches/images.tar
            cp docker/.env.default docker/.env
            make test start
            docker cp . $(docker ps --filter Name=go_sample_api_test -q):/go/src/github.com/snowman-mh/go-sample
            docker run --network test_default jwilder/dockerize -wait tcp://mysql:3306 -timeout 1m
            make test run
  migrate:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build and Push Docker Image
          command: |
            diff=$(git diff --name-only $(git show HEAD | grep 'Merge: ' | sed -e 's/Merge: //g; s/ /\.\.\./g'))
            if [[ "${diff}" =~ db/migrations/ ]] ; then
              docker build -t go-sample-migration -f docker/migration/Dockerfile .
              echo "Implement me!"
              echo "Tag and Push Docker Image to container image registry."
              echo "For example, tag and push to Amazon ECR."
            fi
      - run:
          name: Migrate
          command: |
            diff=$(git diff --name-only $(git show HEAD | grep 'Merge: ' | sed -e 's/Merge: //g; s/ /\.\.\./g'))
            if [[ "${diff}" =~ db/migrations/ ]] ; then
              echo "Implement me!"
              echo "Migrate relational database or something."
              echo "For example, run ECS Task to migrate Amazon RDS if any migration files added."
            fi
  deploy:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build and Push Docker Image
          command: |
            docker build -t go-sample -f docker/production/Dockerfile .
            echo "Implement me!"
            echo "Tag and Push Docker Image to container image registry."
            echo "For example, tag and push to Amazon ECR."
      - run:
          name: Deploy
          command: |
            echo "Implement me!"
            echo "Deploy application to dev/stg/prd environment."
            echo "For example, update ECS Service for API application."

workflows:
  version: 2
  build:
    jobs:
      - precheck
      - docker_cache
      - test:
          requires:
            - precheck
            - docker_cache
      - migrate:
          requires:
            - test
          filters:
            branches: # filter branches to execute migrate/approve/deploy job (GitLab flow example below)
              only:
                - master
                - staging
                - production
      - approve:
          type: approval
          requires:
            - migrate
      - deploy:
          requires:
            - approve
